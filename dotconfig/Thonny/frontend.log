22:46:51.302 [MainThread] INFO    thonny: Thonny version: 4.1.4
22:46:51.303 [MainThread] INFO    thonny: cwd: /home/ada
22:46:51.303 [MainThread] INFO    thonny: original argv: ['/usr/bin/python', '/usr/bin/thonny']
22:46:51.303 [MainThread] INFO    thonny: sys.executable: /usr/bin/python
22:46:51.303 [MainThread] INFO    thonny: sys.argv: ['/usr/bin/thonny']
22:46:51.303 [MainThread] INFO    thonny: sys.path: ['/usr/bin', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/home/ada/.local/lib/python3.11/site-packages', '/usr/lib/python3.11/site-packages']
22:46:51.303 [MainThread] INFO    thonny: sys.flags: sys.flags(debug=0, inspect=0, interactive=0, optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0, ignore_environment=0, verbose=0, bytes_warning=0, quiet=0, hash_randomization=1, isolated=0, dev_mode=False, utf8_mode=0, warn_default_encoding=0, safe_path=False, int_max_str_digits=-1)
22:46:51.350 [MainThread] INFO    thonny.workbench: Starting Workbench
22:46:51.426 [MainThread] INFO    thonny.workbench: Creating runner
22:46:51.428 [MainThread] INFO    thonny.workbench: Start loading plugins
22:46:51.490 [MainThread] INFO    thonny.workbench: Done loading plugins
22:46:51.606 [MainThread] INFO    thonny.workbench: Opening views
22:46:51.732 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': False, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:46:51.833 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:46:58.645 [MainThread] INFO    thonny.ui_utils: Parent y: 39, rooty: 39, vrooty: 0
22:46:58.646 [MainThread] INFO    thonny.ui_utils: Placing .!nodechoicedialog with geometry +552+293
22:47:00.835 [MainThread] INFO    thonny.ui_utils: Restoring focus to .
22:47:02.894 [Thread-2 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:47:03.016 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:47:08.272 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': True, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:47:08.376 [MainThread] INFO    thonny.shell: BaseShellText.restart(False)
22:47:08.403 [Thread-4 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:47:08.407 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:47:08.413 [MainThread] ERROR   thonny.plugins.micropython.mp_front: Could not get port info for '/dev/ttyACM0'
Traceback (most recent call last):
  File "/usr/lib/python3.11/site-packages/thonny/plugins/micropython/mp_front.py", line 346, in get_switcher_configuration_label
    p = get_port_info(port)
        ^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.11/site-packages/thonny/plugins/micropython/mp_front.py", line 1065, in get_port_info
    raise RuntimeError("Port %s not found" % port)
RuntimeError: Port /dev/ttyACM0 not found
22:47:08.520 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:47:12.553 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:47:12.566 [MainThread] INFO    thonny.misc_utils: Could not import dbus_next, falling back to mount command
22:47:13.773 [MainThread] INFO    thonny.plugins.cpython_frontend.cp_front: Creating LocalCPythonProxy
22:47:13.773 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/cpython_backend/cp_launcher.py', '/home/ada', "{'run.warn_module_shadowing': True}"] /home/ada
22:47:13.864 [MainThread] INFO    thonny.shell: BaseShellText.restart(False)
22:47:14.774 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:47:14.792 [MainThread] INFO    thonny.misc_utils: Could not import dbus_next, falling back to mount command
22:47:16.599 [MainThread] INFO    thonny.running: Killing backend process
22:47:16.599 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:47:16.610 [Thread-6 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:47:16.620 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': False, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:47:16.721 [MainThread] INFO    thonny.shell: BaseShellText.restart(False)
22:47:16.755 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:48:29.019 [MainThread] INFO    thonny.ui_utils: Parent y: 39, rooty: 39, vrooty: 0
22:48:29.019 [MainThread] INFO    thonny.ui_utils: Placing .!nodechoicedialog2 with geometry +552+293
22:48:30.336 [MainThread] INFO    thonny.ui_utils: Parent y: 39, rooty: 39, vrooty: 0
22:48:30.336 [MainThread] INFO    thonny.ui_utils: Placing .!backendfiledialog with geometry +374+67
22:48:34.311 [MainThread] INFO    thonny.ui_utils: Parent y: 39, rooty: 39, vrooty: 0
22:48:34.311 [MainThread] INFO    thonny.ui_utils: Placing .!inlinecommanddialog with geometry +503+329
22:48:34.577 [Thread-8 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:48:34.689 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:48:36.931 [MainThread] WARNING thonny.ui_utils: Dialog without parent:
  File "/usr/bin/thonny", line 8, in <module>
    sys.exit(launch())
  File "/usr/lib/python3.11/site-packages/thonny/__init__.py", line 280, in launch
    bench.mainloop()
  File "/usr/lib/python3.11/tkinter/__init__.py", line 1485, in mainloop
    self.tk.mainloop(n)
  File "/usr/lib/python3.11/tkinter/__init__.py", line 1948, in __call__
    return self.func(*args)
  File "/usr/lib/python3.11/site-packages/thonny/workbench.py", line 2027, in toolbar_handler
    handler(*args)
  File "/usr/lib/python3.11/site-packages/thonny/editors.py", line 933, in _cmd_save_file
    self.get_current_editor().save_file()
  File "/usr/lib/python3.11/site-packages/thonny/editors.py", line 312, in save_file
    result = self.write_remote_file(save_filename, content_bytes, save_copy)
  File "/usr/lib/python3.11/site-packages/thonny/editors.py", line 399, in write_remote_file
    messagebox.showerror(tr("Could not save"), str(result["error"]))
  File "/usr/lib/python3.11/site-packages/thonny/ui_utils.py", line 2450, in wrapper
    _check_dialog_parent(options)
  File "/usr/lib/python3.11/site-packages/thonny/ui_utils.py", line 2066, in _check_dialog_parent
    logger.warning("Dialog without parent:\n%s", "".join(traceback.format_stack()))

22:49:10.364 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': True, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:49:10.475 [MainThread] INFO    thonny.shell: BaseShellText.restart(False)
22:49:10.503 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:49:12.266 [MainThread] INFO    thonny: TIME/MODS 140.964 Before Run (+202 modules)
22:49:12.266 [MainThread] INFO    thonny: NEW MODS ['__future__', '_bisect', '_blake2', '_bz2', '_compression', '_datetime', '_hashlib', '_heapq', '_locale', '_lzma', '_posixsubprocess', '_queue', '_random', '_sha512', '_socket', '_ssl', '_struct', '_tkinter', 'array', 'base64', 'binascii', 'bisect', 'bz2', 'calendar', 'configparser', 'datetime', 'email', 'email._encoded_words', 'email._parseaddr', 'email._policybase', 'email.base64mime', 'email.charset', 'email.encoders', 'email.errors', 'email.feedparser', 'email.header', 'email.iterators', 'email.message', 'email.parser', 'email.quoprimime', 'email.utils', 'encodings.ascii', 'errno', 'faulthandler', 'fcntl', 'fnmatch', 'gettext', 'glob', 'hashlib', 'heapq', 'http', 'http.client', 'ipaddress', 'locale', 'lzma', 'math', 'ntpath', 'pathlib', 'pkgutil', 'platform', 'queue', 'quopri', 'random', 'runpy', 'select', 'selectors', 'serial', 'serial.serialposix', 'serial.serialutil', 'serial.tools', 'serial.tools.list_ports', 'serial.tools.list_ports_common', 'serial.tools.list_ports_linux', 'serial.tools.list_ports_posix', 'shlex', 'shutil', 'signal', 'socket', 'ssl', 'struct', 'subprocess', 'tempfile', 'termios', 'thonny.assistance', 'thonny.ast_utils', 'thonny.backend', 'thonny.base_file_browser', 'thonny.codeview', 'thonny.config', 'thonny.config_ui', 'thonny.editor_helpers', 'thonny.editors', 'thonny.languages', 'thonny.memory', 'thonny.misc_utils', 'thonny.plugins', 'thonny.plugins.about', 'thonny.plugins.assistant_config_page', 'thonny.plugins.ast_view', 'thonny.plugins.autocomplete', 'thonny.plugins.backend', 'thonny.plugins.backend_config_page', 'thonny.plugins.base_syntax_themes', 'thonny.plugins.base_ui_themes', 'thonny.plugins.birdseye_frontend', 'thonny.plugins.calltip', 'thonny.plugins.cells', 'thonny.plugins.circuitpython', 'thonny.plugins.circuitpython.cirpy_back', 'thonny.plugins.circuitpython.cirpy_front', 'thonny.plugins.clean_ui_themes', 'thonny.plugins.coloring', 'thonny.plugins.commenting_indenting', 'thonny.plugins.common_editing_commands', 'thonny.plugins.cpython_backend', 'thonny.plugins.cpython_backend.cp_back', 'thonny.plugins.cpython_frontend', 'thonny.plugins.cpython_frontend.cp_front', 'thonny.plugins.cpython_ssh', 'thonny.plugins.cpython_ssh.cps_front', 'thonny.plugins.debugger', 'thonny.plugins.dock_user_windows_frontend', 'thonny.plugins.editor_config_page', 'thonny.plugins.esp', 'thonny.plugins.ev3', 'thonny.plugins.event_logging', 'thonny.plugins.event_view', 'thonny.plugins.files', 'thonny.plugins.find_replace', 'thonny.plugins.general_config_page', 'thonny.plugins.goto_definition', 'thonny.plugins.heap', 'thonny.plugins.help', 'thonny.plugins.highlight_names', 'thonny.plugins.locals_marker', 'thonny.plugins.microbit', 'thonny.plugins.micropython', 'thonny.plugins.micropython.bare_metal_backend', 'thonny.plugins.micropython.base_flashing_dialog', 'thonny.plugins.micropython.connection', 'thonny.plugins.micropython.esptool_dialog', 'thonny.plugins.micropython.mp_back', 'thonny.plugins.micropython.mp_common', 'thonny.plugins.micropython.mp_front', 'thonny.plugins.micropython.uf2dialog', 'thonny.plugins.micropython.webrepl_connection', 'thonny.plugins.misc_analyzers', 'thonny.plugins.mypy', 'thonny.plugins.notes', 'thonny.plugins.object_inspector', 'thonny.plugins.outline', 'thonny.plugins.paren_matcher', 'thonny.plugins.pgzero_frontend', 'thonny.plugins.pi', 'thonny.plugins.pip_gui', 'thonny.plugins.prime_inventor', 'thonny.plugins.printing', 'thonny.plugins.pylint', 'thonny.plugins.pylint.messages', 'thonny.plugins.pythontutor', 'thonny.plugins.remove_old_data_dir', 'thonny.plugins.replayer', 'thonny.plugins.rp2040', 'thonny.plugins.rpi_pico', 'thonny.plugins.run_debug_config_page', 'thonny.plugins.shell_config_page', 'thonny.plugins.shell_macro', 'thonny.plugins.statement_boxes', 'thonny.plugins.stdlib_error_helpers', 'thonny.plugins.system_shell', 'thonny.plugins.terminal_config_page', 'thonny.plugins.theme_and_font_config_page', 'thonny.plugins.thonny_folders', 'thonny.plugins.todo_view', 'thonny.plugins.tomorrow_syntax_theme', 'thonny.plugins.variables', 'thonny.roughparse', 'thonny.rst_utils', 'thonny.running', 'thonny.shell', 'thonny.terminal', 'thonny.tktextext', 'thonny.token_utils', 'thonny.ui_utils', 'thonny.workbench', 'thonny.workdlg', 'tkinter', 'tkinter.commondialog', 'tkinter.constants', 'tkinter.dialog', 'tkinter.filedialog', 'tkinter.font', 'tkinter.messagebox', 'tkinter.simpledialog', 'tkinter.ttk', 'urllib', 'urllib.error', 'urllib.parse', 'urllib.request', 'urllib.response', 'webbrowser', 'zlib']
22:49:12.274 [MainThread] INFO    thonny.running: Prepared clean state for executing ToplevelCommand(args=['-c'], args_str='-c $EDITOR_CONTENT', cmd_line='%Run -c $EDITOR_CONTENT', tty_mode=True, source='# SPDX-FileCopyrightText: 2021 John Park for Adafruit Industries\n# SPDX-License-Identifier: MIT\n# RaspberryPi Pico RP2040 Mechanical Keyboard\n\nimport time\nimport board\nfrom digitalio import DigitalInOut, Direction, Pull\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode\n\nprint("---Pico Pad Keyboard---")\n\nled = DigitalInOut(board.LED)\nled.direction = Direction.OUTPUT\nled.value = True\n\nkbd = Keyboard(usb_hid.devices)\ncc = ConsumerControl(usb_hid.devices)\n\n# list of pins to use (skipping GP15 on Pico because it\'s funky)\npins = (\n    board.GP0,\n    board.GP1,\n    board.GP2,\n    board.GP3,\n    board.GP4,\n    board.GP5,\n    board.GP6,\n    board.GP7,\n    board.GP8,\n    board.GP9,\n    board.GP10,\n    board.GP11,\n    board.GP12,\n    board.GP13,\n    board.GP14,\n    board.GP16,\n    board.GP17,\n    board.GP18,\n    board.GP19,\n    board.GP20,\n    board.GP21,\n)\n\nMEDIA = 1\nKEY = 2\n\nkeymap = {\n    (0): (KEY, (Keycode.GUI, Keycode.C)),\n    (1): (KEY, (Keycode.GUI, Keycode.V)),\n    (2): (KEY, [Keycode.THREE]),\n    (3): (KEY, [Keycode.FOUR]),\n    (4): (KEY, [Keycode.FIVE]),\n    (5): (MEDIA, ConsumerControlCode.VOLUME_DECREMENT),\n    (6): (MEDIA, ConsumerControlCode.VOLUME_INCREMENT),\n\n    (7): (KEY, [Keycode.R]),\n    (8): (KEY, [Keycode.G]),\n    (9): (KEY, [Keycode.B]),\n    (10): (KEY, [Keycode.UP_ARROW]),\n    (11): (KEY, [Keycode.X]),  # plus key\n    (12): (KEY, [Keycode.Y]),\n    (13): (KEY, [Keycode.Z]),\n\n    (14): (KEY, [Keycode.I]),\n    (15): (KEY, [Keycode.O]),\n    (16): (KEY, [Keycode.LEFT_ARROW]),\n    (17): (KEY, [Keycode.DOWN_ARROW]),\n    (18): (KEY, [Keycode.RIGHT_ARROW]),\n    (19): (KEY, [Keycode.ALT]),\n    (20): (KEY, [Keycode.U]),\n\n}\n\nswitches = []\nfor i in range(len(pins)):\n    switch = DigitalInOut(pins[i])\n    switch.direction = Direction.INPUT\n    switch.pull = Pull.UP\n    switches.append(switch)\n\n\nswitch_state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nwhile True:\n    for button in range(21):\n        if switch_state[button] == 0:\n            if not switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.press(*keymap[button][1])\n                    else:\n                        cc.send(keymap[button][1])\n                except ValueError:  # deals w six key limit\n                    pass\n                switch_state[button] = 1\n\n        if switch_state[button] == 1:\n            if switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.release(*keymap[button][1])\n\n                except ValueError:\n                    pass\n                switch_state[button] = 0\n\n    time.sleep(0.01)  # debounce', name='Run', argv=[], id='cmd_11', local_cwd='/home/ada')
22:49:12.276 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:49:12.295 [MainThread] INFO    thonny: TIME/MODS 0.030 After Run 
22:49:35.866 [MainThread] INFO    thonny: TIME/MODS 23.570 Before Run 
22:49:35.866 [MainThread] INFO    thonny.running: Trying to execute current but runner is 'running'
22:49:36.065 [MainThread] INFO    thonny.running: Prepared clean state for executing ToplevelCommand(args=['-c'], args_str='-c $EDITOR_CONTENT', cmd_line='%Run -c $EDITOR_CONTENT', tty_mode=True, source='# SPDX-FileCopyrightText: 2021 John Park for Adafruit Industries\n# SPDX-License-Identifier: MIT\n# RaspberryPi Pico RP2040 Mechanical Keyboard\n\nimport time\nimport board\nfrom digitalio import DigitalInOut, Direction, Pull\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode\n\nprint("---Pico Pad Keyboard---")\n\nled = DigitalInOut(board.LED)\nled.direction = Direction.OUTPUT\nled.value = True\n\nkbd = Keyboard(usb_hid.devices)\ncc = ConsumerControl(usb_hid.devices)\n\n# list of pins to use (skipping GP15 on Pico because it\'s funky)\npins = (\n    board.GP0,\n    board.GP1,\n    board.GP2,\n    board.GP3,\n    board.GP4,\n    board.GP5,\n    board.GP6,\n    board.GP7,\n    board.GP8,\n    board.GP9,\n    board.GP10,\n    board.GP11,\n    board.GP12,\n    board.GP13,\n    board.GP14,\n    board.GP16,\n    board.GP17,\n    board.GP18,\n    board.GP19,\n    board.GP20,\n    board.GP21,\n)\n\nMEDIA = 1\nKEY = 2\n\nkeymap = {\n    (0): (KEY, (Keycode.GUI, Keycode.C)),\n    (1): (KEY, (Keycode.GUI, Keycode.V)),\n    (2): (KEY, [Keycode.THREE]),\n    (3): (KEY, [Keycode.FOUR]),\n    (4): (KEY, [Keycode.FIVE]),\n    (5): (MEDIA, ConsumerControlCode.VOLUME_DECREMENT),\n    (6): (MEDIA, ConsumerControlCode.VOLUME_INCREMENT),\n\n    (7): (KEY, [Keycode.ENTER]),\n    (8): (KEY, [Keycode.G]),\n    (9): (KEY, [Keycode.B]),\n    (10): (KEY, [Keycode.UP_ARROW]),\n    (11): (KEY, [Keycode.X]),  # plus key\n    (12): (KEY, [Keycode.Y]),\n    (13): (KEY, [Keycode.Z]),\n\n    (14): (KEY, [Keycode.I]),\n    (15): (KEY, [Keycode.O]),\n    (16): (KEY, [Keycode.LEFT_ARROW]),\n    (17): (KEY, [Keycode.DOWN_ARROW]),\n    (18): (KEY, [Keycode.RIGHT_ARROW]),\n    (19): (KEY, [Keycode.ALT]),\n    (20): (KEY, [Keycode.U]),\n\n}\n\nswitches = []\nfor i in range(len(pins)):\n    switch = DigitalInOut(pins[i])\n    switch.direction = Direction.INPUT\n    switch.pull = Pull.UP\n    switches.append(switch)\n\n\nswitch_state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nwhile True:\n    for button in range(21):\n        if switch_state[button] == 0:\n            if not switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.press(*keymap[button][1])\n                    else:\n                        cc.send(keymap[button][1])\n                except ValueError:  # deals w six key limit\n                    pass\n                switch_state[button] = 1\n\n        if switch_state[button] == 1:\n            if switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.release(*keymap[button][1])\n\n                except ValueError:\n                    pass\n                switch_state[button] = 0\n\n    time.sleep(0.01)  # debounce', name='Run', argv=[], id='cmd_13', local_cwd='/home/ada')
22:49:36.066 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:49:36.078 [MainThread] INFO    thonny: TIME/MODS 0.212 After Run 
22:49:57.086 [MainThread] INFO    thonny.running: Killing backend process
22:49:57.095 [Thread-10 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:49:57.187 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:49:57.209 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': True, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:49:57.312 [MainThread] INFO    thonny.shell: BaseShellText.restart(False)
22:49:57.345 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:49:58.002 [MainThread] INFO    thonny.running: Killing backend process
22:49:58.020 [Thread-12 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:49:58.104 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:49:58.124 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': True, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:49:58.270 [MainThread] INFO    thonny.shell: BaseShellText.restart(False)
22:49:58.294 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:50:04.805 [Thread-14 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:50:04.923 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:50:30.367 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': True, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:50:30.476 [MainThread] INFO    thonny.shell: BaseShellText.restart(False)
22:50:30.511 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:50:32.207 [MainThread] INFO    thonny: TIME/MODS 56.129 Before Run 
22:50:32.211 [MainThread] INFO    thonny.running: Prepared clean state for executing ToplevelCommand(args=['-c'], args_str='-c $EDITOR_CONTENT', cmd_line='%Run -c $EDITOR_CONTENT', tty_mode=True, source='# SPDX-FileCopyrightText: 2021 John Park for Adafruit Industries\n# SPDX-License-Identifier: MIT\n# RaspberryPi Pico RP2040 Mechanical Keyboard\n\nimport time\nimport board\nfrom digitalio import DigitalInOut, Direction, Pull\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode\n\nprint("---Pico Pad Keyboard---")\n\nled = DigitalInOut(board.LED)\nled.direction = Direction.OUTPUT\nled.value = True\n\nkbd = Keyboard(usb_hid.devices)\ncc = ConsumerControl(usb_hid.devices)\n\n# list of pins to use (skipping GP15 on Pico because it\'s funky)\npins = (\n    board.GP0,\n    board.GP1,\n    board.GP2,\n    board.GP3,\n    board.GP4,\n    board.GP5,\n    board.GP6,\n    board.GP7,\n    board.GP8,\n    board.GP9,\n    board.GP10,\n    board.GP11,\n    board.GP12,\n    board.GP13,\n    board.GP14,\n    board.GP16,\n    board.GP17,\n    board.GP18,\n    board.GP19,\n    board.GP20,\n    board.GP21,\n)\n\nMEDIA = 1\nKEY = 2\n\nkeymap = {\n    (0): (KEY, (Keycode.GUI, Keycode.C)),\n    (1): (KEY, (Keycode.GUI, Keycode.V)),\n    (2): (KEY, [Keycode.THREE]),\n    (3): (KEY, [Keycode.FOUR]),\n    (4): (KEY, [Keycode.FIVE]),\n    (5): (MEDIA, ConsumerControlCode.VOLUME_DECREMENT),\n    (6): (MEDIA, ConsumerControlCode.VOLUME_INCREMENT),\n\n    (7): (KEY, [Keycode.ENTER]),\n    (8): (KEY, [Keycode.G]),\n    (9): (KEY, [Keycode.B]),\n    (10): (KEY, [Keycode.UP_ARROW]),\n    (11): (KEY, [Keycode.X]),  # plus key\n    (12): (KEY, [Keycode.Y]),\n    (13): (KEY, [Keycode.Z]),\n\n    (14): (KEY, [Keycode.I]),\n    (15): (KEY, [Keycode.O]),\n    (16): (KEY, [Keycode.LEFT_ARROW]),\n    (17): (KEY, [Keycode.DOWN_ARROW]),\n    (18): (KEY, [Keycode.RIGHT_ARROW]),\n    (19): (KEY, [Keycode.ALT]),\n    (20): (KEY, [Keycode.U]),\n\n}\n\nswitches = []\nfor i in range(len(pins)):\n    switch = DigitalInOut(pins[i])\n    switch.direction = Direction.INPUT\n    switch.pull = Pull.UP\n    switches.append(switch)\n\n\nswitch_state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nwhile True:\n    for button in range(21):\n        if switch_state[button] == 0:\n            if not switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.press(*keymap[button][1])\n                    else:\n                        cc.send(keymap[button][1])\n                except ValueError:  # deals w six key limit\n                    pass\n                switch_state[button] = 1\n\n        if switch_state[button] == 1:\n            if switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.release(*keymap[button][1])\n\n                except ValueError:\n                    pass\n                switch_state[button] = 0\n\n    time.sleep(100)  # debounce', name='Run', argv=[], id='cmd_18', local_cwd='/home/ada')
22:50:32.212 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:50:32.221 [MainThread] INFO    thonny: TIME/MODS 0.014 After Run 
22:50:40.413 [MainThread] INFO    thonny: TIME/MODS 8.192 Before Run 
22:50:40.414 [MainThread] INFO    thonny.running: Trying to execute current but runner is 'running'
22:50:41.053 [MainThread] INFO    thonny.running: Prepared clean state for executing ToplevelCommand(args=['-c'], args_str='-c $EDITOR_CONTENT', cmd_line='%Run -c $EDITOR_CONTENT', tty_mode=True, source='# SPDX-FileCopyrightText: 2021 John Park for Adafruit Industries\n# SPDX-License-Identifier: MIT\n# RaspberryPi Pico RP2040 Mechanical Keyboard\n\nimport time\nimport board\nfrom digitalio import DigitalInOut, Direction, Pull\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode\n\nprint("---Pico Pad Keyboard---")\n\nled = DigitalInOut(board.LED)\nled.direction = Direction.OUTPUT\nled.value = True\n\nkbd = Keyboard(usb_hid.devices)\ncc = ConsumerControl(usb_hid.devices)\n\n# list of pins to use (skipping GP15 on Pico because it\'s funky)\npins = (\n    board.GP0,\n    board.GP1,\n    board.GP2,\n    board.GP3,\n    board.GP4,\n    board.GP5,\n    board.GP6,\n    board.GP7,\n    board.GP8,\n    board.GP9,\n    board.GP10,\n    board.GP11,\n    board.GP12,\n    board.GP13,\n    board.GP14,\n    board.GP16,\n    board.GP17,\n    board.GP18,\n    board.GP19,\n    board.GP20,\n    board.GP21,\n)\n\nMEDIA = 1\nKEY = 2\n\nkeymap = {\n    (0): (KEY, (Keycode.GUI, Keycode.C)),\n    (1): (KEY, (Keycode.GUI, Keycode.V)),\n    (2): (KEY, [Keycode.THREE]),\n    (3): (KEY, [Keycode.FOUR]),\n    (4): (KEY, [Keycode.FIVE]),\n    (5): (MEDIA, ConsumerControlCode.VOLUME_DECREMENT),\n    (6): (MEDIA, ConsumerControlCode.VOLUME_INCREMENT),\n\n    (7): (KEY, [Keycode.ENTER]),\n    (8): (KEY, [Keycode.G]),\n    (9): (KEY, [Keycode.B]),\n    (10): (KEY, [Keycode.UP_ARROW]),\n    (11): (KEY, [Keycode.X]),  # plus key\n    (12): (KEY, [Keycode.Y]),\n    (13): (KEY, [Keycode.Z]),\n\n    (14): (KEY, [Keycode.I]),\n    (15): (KEY, [Keycode.O]),\n    (16): (KEY, [Keycode.LEFT_ARROW]),\n    (17): (KEY, [Keycode.DOWN_ARROW]),\n    (18): (KEY, [Keycode.RIGHT_ARROW]),\n    (19): (KEY, [Keycode.ALT]),\n    (20): (KEY, [Keycode.U]),\n\n}\n\nswitches = []\nfor i in range(len(pins)):\n    switch = DigitalInOut(pins[i])\n    switch.direction = Direction.INPUT\n    switch.pull = Pull.UP\n    switches.append(switch)\n\n\nswitch_state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nwhile True:\n    for button in range(21):\n        if switch_state[button] == 0:\n            if not switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.press(*keymap[button][1])\n                    else:\n                        cc.send(keymap[button][1])\n                except ValueError:  # deals w six key limit\n                    pass\n                switch_state[button] = 1\n\n        if switch_state[button] == 1:\n            if switches[button].value:\n                try:\n                    if keymap[button][0] == KEY:\n                        kbd.release(*keymap[button][1])\n\n                except ValueError:\n                    pass\n                switch_state[button] = 0\n\n    time.sleep(0.01)  # debounce', name='Run', argv=[], id='cmd_20', local_cwd='/home/ada')
22:50:41.054 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:50:41.060 [MainThread] INFO    thonny: TIME/MODS 0.647 After Run 
22:50:54.943 [Thread-16 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:50:55.057 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:50:55.139 [MainThread] INFO    thonny.running: Starting the backend: ['/usr/bin/python', '-s', '-u', '-B', '/usr/lib/python3.11/site-packages/thonny/plugins/circuitpython/cirpy_back.py', "{'clean': True, 'port': '/dev/ttyACM0', 'dtr': None, 'rts': None, 'submit_mode': None, 'interrupt_on_connect': True, 'write_block_size': None, 'write_block_delay': None, 'proxy_class': 'CircuitPythonProxy', 'sync_time': True, 'validate_time': False, 'local_rtc': True}"] /home/ada
22:50:55.266 [MainThread] INFO    thonny.shell: BaseShellText.restart(True)
22:50:55.297 [Thread-18 (_listen_stdout)] INFO    thonny.running: Reader got EOF
22:50:55.301 [MainThread] INFO    thonny.plugins.micropython.mp_front: Listing serial ports
22:50:55.306 [MainThread] ERROR   thonny.plugins.micropython.mp_front: Could not get port info for '/dev/ttyACM0'
Traceback (most recent call last):
  File "/usr/lib/python3.11/site-packages/thonny/running.py", line 652, in _pull_backend_messages
    msg = self._proxy.fetch_next_message()
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.11/site-packages/thonny/running.py", line 1317, in fetch_next_message
    raise BackendTerminatedError(self._proc.returncode if self._proc else None)
thonny.running.BackendTerminatedError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.11/site-packages/thonny/plugins/micropython/mp_front.py", line 346, in get_switcher_configuration_label
    p = get_port_info(port)
        ^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.11/site-packages/thonny/plugins/micropython/mp_front.py", line 1065, in get_port_info
    raise RuntimeError("Port %s not found" % port)
RuntimeError: Port /dev/ttyACM0 not found
22:50:55.413 [MainThread] INFO    thonny.shell: BaseShellText._on_backend_terminated
22:59:06.923 [MainThread] INFO    thonny.ui_utils: Restoring focus to .
22:59:06.926 [MainThread] INFO    thonny.editors: Save dialog returned '/home/ada/2036estop.py' with typevariable 'Python files'
